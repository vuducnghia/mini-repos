import tensorflow as tf


class Encoder(tf.keras.Model):
    def __init__(self, vocab_size, embedding_dim, encode_units, batch_sz):
        super().__init__()
        self.batch_sz = batch_sz
        self.encode_units = encode_units
        self.embedding = tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim)
        self.gru = tf.keras.layers.GRU(units=self.encode_units, return_sequences=True, return_state=True,
                                       recurrent_initializer='glorot_uniform')

    def call(self, x, hidden):
        x = self.embedding(x)
        output, state = self.gru(inputs=x, initial_state=hidden)

        return output, state

    def initialize_hidden_state(self):
        return tf.zeros((self.batch_sz, self.encode_units))


class BahdanauAttention(tf.keras.layers.Layer):
    def __init__(self, units):
        super().__init__()
        self.W1 = tf.keras.layers.Dense(units)
        self.W2 = tf.keras.layers.Dense(units)
        self.V = tf.keras.layers.Dense(1)

    # query: hidden state is generated by last element of sequence
    # value: sequence hidden state
    def call(self, query, value):
        # query hidden state shape == (batch_size, hidden size)
        # query_with_time_axis shape == (batch_size, 1, hidden size)
        # values shape == (batch_size, max_len_word, hidden size)
        # we are doing this to broadcast addition along the time axis to calculate the score
        query_with_time_axis = tf.expand_dims(query, 1)

        # score = FC(tanh(FC(EO) + FC(H)))      #EO = Encoder output
        score = self.V(tf.nn.tanh(self.W1(query_with_time_axis) + self.W2(value)))  # shape: (bz, max_len_word, 1)

        # attention weights = softmax(score, axis = 1)
        attention_weight = tf.nn.softmax(score, axis=1)  # shape: (bz, max_len_word, 1)

        # context vector = sum(attention weights * EO, axis = 1)
        context_vector = attention_weight * value  # shape: (bz, max_len_word, hidden size)
        context_vector = tf.reduce_sum(context_vector, axis=1)  # shape: (bz, hidden size)

        return context_vector, attention_weight


class Decoder(tf.keras.Model):
    def __init__(self, vocab_size, embedding_dim, decode_units, batch_sz):
        super().__init__()
        self.batch_sz = batch_sz
        self.decode_units = decode_units
        self.embedding = tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=embedding_dim)
        self.gru = tf.keras.layers.GRU(units=self.decode_units, return_sequences=True, return_state=True,
                                       recurrent_initializer='glorot_uniform')
        self.fc = tf.keras.layers.Dense(vocab_size)

        # used for attention
        self.attention = BahdanauAttention(self.decode_units)

    def call(self, x, hidden, encode_output):
        # encode_output shape == (batch_size, max_length, hidden_size)
        # context_vector shape: (bz, hidden size)
        context_vector, attention_weight = self.attention(hidden, encode_output)

        # x shape before == (batch_size, 1)
        # x shape after passing through embedding == (batch_size, 1, embedding_dim)
        x = self.embedding(x)

        # x shape after concatenation == (batch_size, 1, embedding_dim + hidden_size)
        x = tf.concat([tf.expand_dims(context_vector, axis=1), x], axis=-1)

        # passing the concatenated vector to the GRU
        output, state = self.gru(x)     #shape output: (bz, 1, decode_units)

        # output shape == (batch_size * 1, decode_units)
        output = tf.reshape(output, shape=(-1, output.shape[2]))

        # output shape == (batch_size, vocab_size)
        x = self.fc(output)

        return x, state, attention_weight
